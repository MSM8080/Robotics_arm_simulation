// Generated by gencpp from file qbot/joy_data.msg
// DO NOT EDIT!


#ifndef QBOT_MESSAGE_JOY_DATA_H
#define QBOT_MESSAGE_JOY_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace qbot
{
template <class ContainerAllocator>
struct joy_data_
{
  typedef joy_data_<ContainerAllocator> Type;

  joy_data_()
    : Data()  {
    }
  joy_data_(const ContainerAllocator& _alloc)
    : Data(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _Data_type;
  _Data_type Data;





  typedef boost::shared_ptr< ::qbot::joy_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qbot::joy_data_<ContainerAllocator> const> ConstPtr;

}; // struct joy_data_

typedef ::qbot::joy_data_<std::allocator<void> > joy_data;

typedef boost::shared_ptr< ::qbot::joy_data > joy_dataPtr;
typedef boost::shared_ptr< ::qbot::joy_data const> joy_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qbot::joy_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qbot::joy_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::qbot::joy_data_<ContainerAllocator1> & lhs, const ::qbot::joy_data_<ContainerAllocator2> & rhs)
{
  return lhs.Data == rhs.Data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::qbot::joy_data_<ContainerAllocator1> & lhs, const ::qbot::joy_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace qbot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::qbot::joy_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qbot::joy_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qbot::joy_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qbot::joy_data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qbot::joy_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qbot::joy_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qbot::joy_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2d226b1a015f23e10eb1a23f5775c959";
  }

  static const char* value(const ::qbot::joy_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2d226b1a015f23e1ULL;
  static const uint64_t static_value2 = 0x0eb1a23f5775c959ULL;
};

template<class ContainerAllocator>
struct DataType< ::qbot::joy_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qbot/joy_data";
  }

  static const char* value(const ::qbot::joy_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qbot::joy_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] Data\n"
"\n"
;
  }

  static const char* value(const ::qbot::joy_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qbot::joy_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct joy_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qbot::joy_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qbot::joy_data_<ContainerAllocator>& v)
  {
    s << indent << "Data[]" << std::endl;
    for (size_t i = 0; i < v.Data.size(); ++i)
    {
      s << indent << "  Data[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.Data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // QBOT_MESSAGE_JOY_DATA_H
